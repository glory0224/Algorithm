# 백만장자 프로젝트

# 5년 간의 수행 끝에 원재는 미래를 보는 능력을 갖게 되었다. 이 능력으로 원재는 사재기를 하려고 한다.

# 다만 당국의 감시가 심해 한 번에 많은 양을 사재기 할 수 없다.

# 다음과 같은 조건 하에서 사재기를 하여 최대한의 이득을 얻도록 도와주자.

#     1. 원재는 연속된 N일 동안의 물건의 매매가를 예측하여 알고 있다.
#     2. 당국의 감시망에 걸리지 않기 위해 하루에 최대 1만큼 구입할 수 있다.
#     3. 판매는 얼마든지 할 수 있다.

# 예를 들어 3일 동안의 매매가가 1, 2, 3 이라면 처음 두 날에 원료를 구매하여 마지막 날에 팔면 3의 이익을 얻을 수 있다.


# [입력]

# 첫 번째 줄에 테스트 케이스의 수 T가 주어진다.

# 각 테스트 케이스 별로 첫 줄에는 자연수 N(2 ≤ N ≤ 1,000,000)이 주어지고,

# 둘째 줄에는 각 날의 매매가를 나타내는 N개의 자연수들이 공백으로 구분되어 순서대로 주어진다.

# 각 날의 매매가는 10,000이하이다.


# [출력]

# 각 테스트 케이스마다 ‘#x’(x는 테스트케이스 번호를 의미하며 1부터 시작한다)를 출력하고, 최대 이익을 출력한다.


# [예제 풀이]

# 1번째 케이스는 아무 것도 사지 않는 것이 최대 이익이다.

# 2번째 케이스는 1,2일에 각각 한 개씩 사서 세 번째 날에 두 개를 팔면 10의 이익을 얻을 수 있다.

# 입력

# 3
# 3
# 10 7 6
# 3
# 3 5 9
# 5
# 1 1 3 1 2

# 출력 
# #1 0
# #2 10
# #3 5

T = int(input())

for i in range(1, T + 1):
    days = int(input())
    prices = list(map(int, input().split()))
    answer = 0
    max_price = prices[-1] # 마지막 날의 가격을 최대값으로 초기화
    for j in range(days - 2, -1, -1):
        if prices[j] > max_price: # 이전에 최대 가격보다 더 높은 가격이 있을 경우 최대 값 갱신 
            max_price = prices[j]
        else: # 최대값보다 작은 가격이 있다면 그 가격에 맞춰서 사고 판매
            answer += max_price - prices[j]
    
    print("#{} {}".format(i, answer))


# for j in range(days - 2, -1, -1): 이렇게 반복문을 구성한 이유

# 최대 이익을 구하는데 마지막날을 판매일로 삼고, 나머지 날짜 중에서 최대 매입가를 구하기 위해

# ex) 5일 매매가 [1, 1, 3, 1, 2] 라고 하면, 마지막 날(5일째)을 판매일로 삼으려면 4일째(즉, days - 1)
# 이전까지는 매입해야 하므로 원래 4일째에 -1 추가 한 3일째까지만 루프를 돈다.
# 이유는 4일째에서 매입하면 5일째에서는 판매만 가능하고 매입은 불가능하기 때문이다.

