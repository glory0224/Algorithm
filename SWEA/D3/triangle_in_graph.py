# 그래프의 삼각형 문제 

# 정점이 N개, 간선이 M개 있는 그래프가 주어진다. 정점에는 1번에서 N번까지의 번호가 붙어 있다.

# 이 때, i번 정점과 j번 정점 사이에, j번 정점과 k번 정점 사이에, k번 정점과 i번 정점 사이에

# 모두 간선이 있는 ( i, j, k ) (단, i < j < k )를 삼각형이라고 하자.

# 삼각형의 개수를 구하는 프로그램을 작성하라.


# [입력]

# 첫 번째 줄에 테스트 케이스의 수 T가 주어진다.

# 각 테스트 케이스의 첫 번째 줄에는 두 정수 N, M  이 공백으로 구분되어 주어진다.

# 다음 M개의 줄에는 두 정수 x, y 가 공백으로 구분되어 주어진다.

# 이는 x번 정점과 y번 정점 사이에 간선이 있다는 의미이다.

# 반대로 y번 정점과 x번 정점 사이에 간선이 있다는 의미도 된다.

# 같은 간선을 의미하는 입력이 여러 번 주어지지 않는다.


# [출력]

# 각 테스트 케이스마다 ‘#x’(x는 테스트케이스 번호를 의미하며 1부터 시작한다)를 출력하고 한 칸을 띄운 후,

# 삼각형의 개수를 출력한다.

# 입력
# 1
# 3 3 # N, M
# 1 2 # M 의 정보
# 2 3
# 1 3

# 출력
# #1 1


# 정점의 개수와 간선의 정보를 이용해서 간선이 모두 이어져 있다면 삼각형 개수 + 1

T = int(input())

for tc in range(1, T+1):

    N, M = map(int, input().split())

    # 정점 개수만큼 그래프 생성
    graph = [[] for _ in range(N+1)]

    # 간선 수만큼 인접 그래프 정보 넣어줌
    for i in range(M):
        # 간선 정보 받아옴
        x, y = map(int, input().split())
        # 간선 정보를 인접 그래프에 넣는다. 
        graph[x].append(y) 
        graph[y].append(x)

    triangle_cnt = 0
    # 삼각형이 완성되는지 세 정점 개수 범위만큼 돌면서 인접 리스트 정보가 각각 포함되어 있는지 확인

    for i in range(1, N+1): # 정점이 1부터 시작하기 때문에 1부터 N까지 첫번째 정점 
        for j in range(i+1, N+1): # i+1부터 N까지 두번째 정점 
            for k in range(j+1, N+1): # j+1부터 N까지 세번째 정점 
                if i in graph[k] and j in graph[i] and k in graph[i]: # 세 정점이 각각 인접 리스트에 모두 포함되는 경우 간선이 이어져 있다는 것이기 때문에 cnt +1
                    triangle_cnt += 1
    
    print(f"#{tc} {triangle_cnt}")







