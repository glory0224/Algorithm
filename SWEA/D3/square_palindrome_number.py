# 제곱 팰린드롬 수

# 앞으로 읽어도 뒤로 읽어도 똑같은 문자열을 팰린드롬 혹은 회문이라고 부른다. 어떠한 실수 N이 양의 정수이며, 십진수로 표현했을 때 팰린드롬이면 이 수를 팰린드롬 수라고 부른다.

# 어떠한 양의 정수 N에 대해서, N과 √N이 모두 팰린드롬이면 이 수를 제곱 팰린드롬 수 라고 부른다.

# 예를 들어, 121은 제곱 팰린드롬 수인데, 121이 팰린드롬이며, 121의 제곱근인 11 역시 팰린드롬이기 때문이다.

# A 이상 B 이하 제곱 팰린드롬 수는 모두 몇 개인가?

# [입력]

# 첫 번째 줄에 테스트 케이스의 수 TC가 주어진다. 이후 TC개의 테스트 케이스가 새 줄로 구분되어 주어진다. 각 테스트 케이스의 첫 번째 줄에 A, B 가 주어진다. (1 ≤ A ≤ B ≤ 1000)

# [출력]

# 각 테스트 케이스 마다 한 줄씩, 제곱 팰린드롬 수의 개수를 출력하라.

# 입력
# 3
# 1 9
# 10 99
# 100 1000

# 출력
# #1 3
# #2 0
# #3 2

# 회문을 구하는 방법 입력값에서 역순으로 정렬 [::-1] 이 같으면 회문

# 여기서는 A와 B 사이의 수가 팰린드롬인지 확인 하고 제곱근한 수 역시 팰린드롬인지 확인한다. 

import math

T = int(input())

for tc in range(1, T+1):
    A, B = map(int, input().split())
    
    cnt = 0
    # A, B의 범위만큼 돈다.
    for num in range(A, B+1):
        # 문자열 변환 후 팰린드롬 확인
        str_num = str(num)
        if str_num == str_num[::-1]:
            num_sqrt = int(math.sqrt(num)) # 정수까지만 자른다. 이때 제곱근이 소수 단위까지 였다면 원래 수인 num과 num_sqrt * num_sqrt 가 같을 수 없다. 정수인 경우만 같다 이것으로 제곱근인지 판별한다. 
            if num_sqrt * num_sqrt == num: # 제곱근이 맞는지 확인
                str_num_sqrt = str(num_sqrt)
                if str_num_sqrt == str_num_sqrt[::-1]:
                    cnt += 1

    print(f"#{tc} {cnt}")

            


