# 문자열 교집합

# 문자열 집합은 알파멧 소문자로 이루어진 문자열들로 구성된 집합을 의미한다.

# 예를 들어 {"aba", "cdefasad", "wefawef"}은 문자열 3개로 구성된 한 개의 문자열 집합이다.

# 입력으로 2개의 문자열 집합이 주어졌을 때에, 두 집합에 모두 속하는 문자열 원소의 개수를 출력하는 프로그램을 작성하시오.


# [입력]

# 첫 번째 줄에 테스트 케이스의 수 T가 주어진다.

# 각 테스트 케이스마다 첫 번째 줄에 두 집합의 원소의 갯수를 나타내는 두 자연수 N M(1≤N, M≤10^5)이 주어진다.

# 둘째 줄에는 첫 번째 집합의 원소 문자열들이 공백을 사이에 두고 주어진다.

# 셋째 줄에는 두 번째 집합의 원소 문자열들이 공백을 사이에 두고 주어진다.

# 각 문자열은 소문자 알파벳으로만 구성되며, 길이가 1 이상 50 이하임이 보장된다.

# 한 집합에 같은 문자열이 두 번 이상 등장하지 않음이 보장된다.


# [출력]

# 각 테스트 케이스마다 첫째 줄에 ‘#x’(x는 테스트케이스 번호를 의미하며 1부터 시작한다)를 출력한 다음, 공백을 하나 사이에 두고 해당 테스트 케이스의 답을 출력한다.

# 입력
# 2
# 2 3
# ab a
# a ac ba
# 3 3
# aa bb cc
# dd cc aa

# 출력
# #1 1
# #2 2

# 우선 두 자연수 길이가 각각 10^5 이므로 시간 초과가 나지 않도록 코드를 작성해야 하는 것에 유의한다.

# 따라서 단순 완전 탐색을 이용하는 경우 시간 초과가 날 수 있다. 

T = int(input())

answer = []
for tc in range(1, T+1):
    N, M = map(int, input().split())

    A = list(input().split())
    B = list(input().split())

    # 교집합 찾기
    intersection = set(A) & set(B)

    # 길이가 곧 개수
    intersection_cnt = len(intersection)
    answer.append(f"#{tc} {intersection_cnt}")

for x in answer:
    print(x)
    

    


