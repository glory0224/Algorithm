# 다솔이의 다이아몬드 장식

# 다솔이는 어떤 문자열을 하나 가지고 있는데, 이 문자열이 별로 아름답지 못하다고 생각하고 있다.

# 그래서 장식을 해주기로 했다.

# 예를 들어 문자열이 “D”라면 주위를 ‘#’로 이루어진 다이아몬드로 감싸서 다음과 같이 5x5크기로 장식한다.

# 빈 곳은 ‘.’로 표시한다.


# 만약 문자열의 길이가 1보다 더 크면, 인접한 문자는 ‘#’과 ‘.’을 공유하여 장식한다.

# 예를 들어 문자열이 “APPLE”이면 다음과 같이 장식한다.

# 주어진 문자열을 장식해주는 프로그램을 작성하라.

# [입력]

# 첫 번째 줄에 테스트 케이스의 수 T가 주어진다.

# 각 테스트 케이스의 첫 번째 줄에는 길이가 1이상 50이하인 문자열이 주어진다.

# [출력]

# 각 테스트 케이스마다 다섯 줄에 걸쳐 장식된 문자열을 출력한다.


# 입력
# 2     // TC의 개수
# D    // 첫번째 TC의 문자열
# APPLE	  // 두번째 TC의 문자열

# 출력
# ..#..        // 첫번째 TC의 출력
# .#.#.
# #.D.#
# .#.#.
# ..#..
# ..#...#...#...#...#..  // 두번째 TC의 출력
# .#.#.#.#.#.#.#.#.#.#.
# #.A.#.P.#.P.#.L.#.E.#
# .#.#.#.#.#.#.#.#.#.#.
# ..#...#...#...#...#..

# 패턴을 찾아서 해결하는 방식

T = int(input())

for tc in range(1, T+1):

    char = input().strip()

    # 0번, 4번 인덱스 행 패턴 
    p1 = '..#.'
    # 1번, 3번 인덱스 행 패턴
    p2 = '.#.#'
    # p1과 p2의 마지막 패턴
    p1p2_last = '.'

    # 2번 가운데 인덱스 행 패턴
    p3_1 = '#.'
    p3_2 = '.'

    p3_last = '#'

    # 문자열과 장식을 넣어줄 배열 선언(5 * 5 크기)
    N = len(char)
    answer = [''] * 5 
    
    answer[0] += p1 * N + p1p2_last
    answer[1] += p2 * N + p1p2_last
    # char의 길이만큼 장식 추가
    for c in char:
        answer[2] += p3_1 + c + p3_2
    answer[2] += p3_last
    answer[3] += p2 * N + p1p2_last
    answer[4] += p1 * N + p1p2_last

    for a in answer:
        print(a)













