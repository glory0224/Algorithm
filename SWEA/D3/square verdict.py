# 정사각형 판정 문제 - 구현 문제

# N×N 크기의 격자판이 있다. 각각의 격자는 비어 있거나(‘.’), 막혀 있다(‘#’). 이때, 막혀 있는 칸들이 하나의 정사각형을 이루는지를 판단하는 프로그램을 작성하라.

# [입력]
# 첫 번째 줄에 테스트 케이스의 수 T가 주어진다.
# 각 테스트 케이스의 첫 번째 줄에는 격자판의 크기 N (1≤N≤20 이 주어진다. 다음 N개의 줄은 격자판의 배치를 나타내며, 각 줄에는 ‘.’ 또는 ‘#’로만 이루어진 길이가 N인 문자열이 주어진다. 모든 격자판에는 최소 1개 이상의 ‘#’ 칸이 있음이 보장된다.

# [출력]
# 각 테스트 케이스마다 격자판의 막혀 있는 칸들이 하나의 정사각형을 이루면 ‘yes’를, 그렇지 않다면 ‘no’를 출력한다.

# 입력
# 3
# 3
# ...
# .##
# .##
# 4
# #..#
# ....
# ....
# #..#
# 5
# .....
# .###.
# .###.
# .###.
# .....

# 출력
# #1 yes
# #2 no
# #3 yes

T = int(input())

for tc in range(1, T+1):
    N = int(input())

    # 격자판 입력 받기
    matrix = [input() for _ in range(N)]
    
    # 격자 판에서 막혀있는 '#'으로 표현한 리스트 생성
    check = []

    # 0과 1로 구분 
    for row in matrix:
        for ch in row:
            if ch == '#':
                check.append(1)
            else:
                check.append(0)
    
    # 막힌 칸에서 최대/최소 x, y 좌표 계산
    # 비교 기준점(최대 기준을 벗어나지 않도록 하기 위해)
    min_x, max_x, min_y, max_y = N - 1 , 0, N-1, 0

    # 막힌 길이 확인 되면 그 확인된 인덱스로부터 최대 최소 갱신
    for i in range(len(check)):
        if check[i]:
            # i를 N으로 나눈 몫이 행 번호
            # i를 N으로 나눈 나머지가 열 번호
            x, y = i % N , i // N   # i % N : 격자판의 열 구하기, i // N : 격자판의 행 구하기
            if x < min_x:
                min_x = x
            if x > max_x:
                max_x = x
            if y < min_y:
                min_y = y
            if y > max_y:
                max_y = y
    
    # 정사각형의 한변의 길이를 구함
    # 예를 들어, (max_x - min_x)가 (max_y - min_y)보다 크다면, 가로의 길이가 세로의 길이보다 크므로 세로의 길이를 맞추기 위해서는 정사각형 한 변의 길이를 (max_x - min_x)로 설정해야 한다.
    # 이와 같은 이유로, 가로와 세로 중에 더 긴 값과 같거나 작은 값이 정사각형 한 변의 길이가 된다.
    # 최소와 최대 x, y 좌표의 가장 큰 차이를 구하고 + 1
    # +1을 하는 이유는 x(가로) 와 y(세로) 좌표를 모두 포함하는 정사각형 한변의 길이를 구하기 위함이다.
    size = max(max_x - min_x, max_y - min_y) + 1

    # blocked 리스트에서 각 좌표 (x, y)는 y * N + x 인덱스에 매핑된다. 
    # 이유는 2차원의 좌표를 1차원의 배열 인덱스로 표현하기 위함이다.
    # 예시로 N = 3 일때 2차원 좌표 (x, y)와 해당 좌표에 대응하는 1차원 인덱스 i 확인
    # (0, 0)  (1, 0)  (2, 0)     0   1   2
    # (0, 1)  (1, 1)  (2, 1)  ->  3   4   5
    # (0, 2)  (1, 2)  (2, 2)     6   7   8

    # 이 때, 좌표 (x, y)에 대응하는 1차원 인덱스 i는 y * N + x로 계산됩니다. 예를 들어, 좌표 (1, 2)는 1차원 인덱스로 2 * 3 + 1 = 7이다.
    # 따라서, blocked 리스트에서 각 좌표 (x, y)를 1차원 인덱스 i로 변환할 때, y * N + x를 사용한다.

    # 최소 x, y 부터 최대 x,y 좌표 까지의 길이 면적과 한변의 길이의 제곱이 같다면 정사각형으로 판단한다.
    if size ** 2 == sum(check[min_y*N+min_x:max_y*N + max_x+1]):
        print(f"#{tc} yes")
    else:
        print(f"#{tc} no")
    







    
    

