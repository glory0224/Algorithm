# USB 꽂기의 미스터리 문제

# 정우는 USB 커넥터를 포트에 꽂고 있다. 정확히 꽂기 까지 다음과 같은 과정을 거친다.
 
# - 가장 처음 USB를 꽂을 때, p의 확률로 올바른 면으로 USB를꽂은 것이고 ,
#     (1 - p)의 확률로는 뒤집어서 USB를 꽂은 것이다.


# - 만약 올바른 면으로 USB를 꽂으면 q의 확률로 정상적으로 USB가 꽂히고,
#     (1 - q)의 확률로는 꽂히지 않는다. USB가 뒤집어져 있다면 절대로 꽂히지 않는다. 

# - USB를 꽂는 것을 실패하면 USB를 뒤집은 다음 다시 꽂는 것을 시도한다.


# 이 때, USB를 정확히 i번 뒤집었을 때 USB가 꽂힐 확률을 si 로 나타낸다.

# 정우는 지금까지 USB를 두 번이나 뒤집어야 USB가 제대로 꽂히는 놀라운 경험을 너무 많이 했고, 이런 상황이 얼마나 많이 일어날 수 있는지 알고 싶다.

# 이를 위해 p, q가 주어지면 s1＜ s2인지 아닌지 판별하는 프로그램을 작성하라.


# [입력]

# 첫 번째 줄에 테스트 케이스의 수 TC가 주어진다.

# 이후 TC개의 테스트 케이스마다 두 실수 p와 q가(0 ≤ p ≤ 1 , 0 ≤ q ≤ 1) 공백으로 구분되어 주어진다.

# 주어진 입력은 |s1 - s2| ≥ 10-5 인 것이 보장된다.


# [출력]
 

# 각 테스트 케이스마다 ‘#t ’( t 는 테스트케이스 번호를 의미하며 1부터 시작한다)를 출력하고,

# s1< s2 이면 “YES”를 아니면 “NO”를 출력한다.

# 입력
# 2
# 0.8 0.5
# 0.6 0.5

# 출력
# #1 YES
# #2 NO

T = int(input())

for tc in range(1, T+1):

    p, q = map(float, input().split())

    # s1은 USB를 처음 꽂을 때 올바른 면으로 꽂았을 확률
    # (1-p)는 USB를 뒤집어서 꽂을 확률이고, q는 올바른 면으로 꽂은 USB가 정상적으로 꽂힐 확률 (1번 뒤집는다.)
    # 따라서 (1-p) * q는 USB를 처음 올바른 면으로 꽂고 정상적으로 꽂힐 확률을 나타낸다. (성공할 확률)
    # 1번 뒤집었을 때 USB가 꽂힐 확률
    s1 = (1 - p) * q

    # s2는 USB를 처음에 뒤집어서 꽂았을 때 USB가 정상적으로 꽂힐 확률
    # p는 USB를 올바르게 꽂을 확률이기 때문에 뒤집어서 꽂는 경우에 올바르게 다시 뒤집어서 시도 (1번 뒤집는다.)
    # 올바른 면으로 꽂힌 경우에서 (1-q)의 확률로 꽂히지 않고 다시 뒤집어서 꽂을 확률 (2번 뒤집는다.)
    # 다시 뒤집어서 꽂았을 때 q의 확률로 올바르게 꽂히는 확률 (성공할 확률)
    s2 = p * (1 - q) * q

    if s1 < s2:
        print(f"#{tc} YES")
    else:
        print(f"#{tc} NO")
 