# 제곱수 만들기

# 어떤 자연수 A가 주어진다. 여기에 자연수 B를 곱한 결과가 거듭제곱수가 되는 최소의 B를 구하는 프로그램을 작성하라. 여기서 자연수는 1이상인 정수를 뜻한다.

# [입력]

# 첫 번째 줄에 테스트 케이스의 수 T 가 주어진다.
# 각 테스트 케이스의 첫 번째 줄에는 하나의 자연수 A(1≤A≤107) 가 주어진다.


# [출력]
# 각 테스트 케이스마다 A에 곱한 결과가 거듭제곱수가 되는 최소의 자연수를 출력한다.

# 입력
# 8
# 1
# 2
# 3
# 4
# 5
# 6
# 60
# 1000

# 출력
# #1 1
# #2 2
# #3 3
# #4 1
# #5 5
# #6 6
# #7 15
# #8 10

# 10^7으로 범위가 크기 때문에 소수에 대해서 A가 나누어 떨어지는지 확인

prime = [2] # 소수 리스트에 소수의 시작인 2부터 넣어두고 초기화

# 자연수 A의 범위인 10^7에서 소수만 판별하여 넣는다. 
for i in range(3, int(10000000 ** 0.5), 2):
    for p in prime: # 소수리스트에서 소수 가져옴
        if not i % p: # i가 이미 소수로 나누어 떨어지는 경우
            break
    
    else: # 나누어 떨어지지 않는다면 소수 리스트에 값 추가
        prime.append(i)

# A의 범위가 크기 때문에 한번에 출력해줄 정답 리스트 초기화
answer = []

T = int(input())

for tc in range(1, T+1):

    A = int(input())

    # 최종 결과 변수 , 이미 거듭 제곱인 경우 1을 곱하면 되기 때문에 1로 초기화
    res = 1 

    if A ** 0.5 != int(A ** 0.5): # 제곱근이 서로 다른 경우
        for p in prime: # 소수 리스트를 순회
            cnt = 0 # 소인수의 개수를 세는 변수
            
            while not A % p: # A가 소수 p로 나누어 떨어지는 동안 반복
                A //= p # A를 p로 나눈다.
                cnt += 1 # 소인수 개수 증가
            
            if cnt % 2: # 소인수의 개수가 홀수인 경우
                res *= p # res에 소수 p를 곱한다.
            
            if A == 1 or p > A: # A가 더 이상 소인수로 나눠지지 않거나, p가 A보다 큰 경우
                break # 반복 종료

        if A > 1:   # 남은 A가 소수인 경우
            res *= A # res에 남은 소수를 곱한다. 
    
    answer.append(f"#{tc} {res}") # 테스트 케이스 결과를 answer에 추가

for x in answer:
    print(x)

        