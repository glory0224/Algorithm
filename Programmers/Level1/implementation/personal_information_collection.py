# 개인정보 수집 유효기간 문제 

# 고객의 약관 동의를 얻어서 수집된 1~n번으로 분류되는 개인정보 n개가 있습니다. 약관 종류는 여러 가지 있으며 각 약관마다 개인정보 보관 유효기간이 정해져 있습니다. 당신은 각 개인정보가 어떤 약관으로 수집됐는지 알고 있습니다. 수집된 개인정보는 유효기간 전까지만 보관 가능하며, 유효기간이 지났다면 반드시 파기해야 합니다.

# 예를 들어, A라는 약관의 유효기간이 12 달이고, 2021년 1월 5일에 수집된 개인정보가 A약관으로 수집되었다면 해당 개인정보는 2022년 1월 4일까지 보관 가능하며 2022년 1월 5일부터 파기해야 할 개인정보입니다.
# 당신은 오늘 날짜로 파기해야 할 개인정보 번호들을 구하려 합니다.

# 모든 달은 28일까지 있다고 가정합니다.

# 다음은 오늘 날짜가 2022.05.19일 때의 예시입니다.

# 약관 종류	유효기간
# A	6 달
# B	12 달
# C	3 달
# 번호	개인정보 수집 일자	약관 종류
# 1	2021.05.02	A
# 2	2021.07.01	B
# 3	2022.02.19	C
# 4	2022.02.20	C
# 첫 번째 개인정보는 A약관에 의해 2021년 11월 1일까지 보관 가능하며, 유효기간이 지났으므로 파기해야 할 개인정보입니다.
# 두 번째 개인정보는 B약관에 의해 2022년 6월 28일까지 보관 가능하며, 유효기간이 지나지 않았으므로 아직 보관 가능합니다.
# 세 번째 개인정보는 C약관에 의해 2022년 5월 18일까지 보관 가능하며, 유효기간이 지났으므로 파기해야 할 개인정보입니다.
# 네 번째 개인정보는 C약관에 의해 2022년 5월 19일까지 보관 가능하며, 유효기간이 지나지 않았으므로 아직 보관 가능합니다.
# 따라서 파기해야 할 개인정보 번호는 [1, 3]입니다.

# 오늘 날짜를 의미하는 문자열 today, 약관의 유효기간을 담은 1차원 문자열 배열 terms와 수집된 개인정보의 정보를 담은 1차원 문자열 배열 privacies가 매개변수로 주어집니다. 이때 파기해야 할 개인정보의 번호를 오름차순으로 1차원 정수 배열에 담아 return 하도록 solution 함수를 완성해 주세요.

# 제한사항
# today는 "YYYY.MM.DD" 형태로 오늘 날짜를 나타냅니다.
# 1 ≤ terms의 길이 ≤ 20
# terms의 원소는 "약관 종류 유효기간" 형태의 약관 종류와 유효기간을 공백 하나로 구분한 문자열입니다.
# 약관 종류는 A~Z중 알파벳 대문자 하나이며, terms 배열에서 약관 종류는 중복되지 않습니다.
# 유효기간은 개인정보를 보관할 수 있는 달 수를 나타내는 정수이며, 1 이상 100 이하입니다.
# 1 ≤ privacies의 길이 ≤ 100
# privacies[i]는 i+1번 개인정보의 수집 일자와 약관 종류를 나타냅니다.
# privacies의 원소는 "날짜 약관 종류" 형태의 날짜와 약관 종류를 공백 하나로 구분한 문자열입니다.
# 날짜는 "YYYY.MM.DD" 형태의 개인정보가 수집된 날짜를 나타내며, today 이전의 날짜만 주어집니다.
# privacies의 약관 종류는 항상 terms에 나타난 약관 종류만 주어집니다.
# today와 privacies에 등장하는 날짜의 YYYY는 연도, MM은 월, DD는 일을 나타내며 점(.) 하나로 구분되어 있습니다.
# 2000 ≤ YYYY ≤ 2022
# 1 ≤ MM ≤ 12
# MM이 한 자릿수인 경우 앞에 0이 붙습니다.
# 1 ≤ DD ≤ 28
# DD가 한 자릿수인 경우 앞에 0이 붙습니다.
# 파기해야 할 개인정보가 하나 이상 존재하는 입력만 주어집니다.


# today	                terms	                                privacies	                                                    result
# "2022.05.19"	["A 6", "B 12", "C 3"]	    ["2021.05.02 A", "2021.07.01 B", "2022.02.19 C", "2022.02.20 C"]	                [1, 3]
# "2020.01.01"	["Z 3", "D 5"]	        ["2019.01.01 D", "2019.11.15 Z", "2019.08.02 D", "2019.07.01 D", "2018.12.28 Z"]	    [1, 4, 5]

def solution(today, terms, privacies):
    answer = []
    
    year, month, day = int(today[0:4]), int(today[5:7]), int(today[8:])
    time_dict = {}

    # 해당하는 조건을 키 벨류로 딕셔너리에 담는다.
    for t in terms:
        case = t[0]
        time_dict[case] = int(t[2:])
    
    for i in range(len(privacies)):
        date , case = privacies[i].split()
        
        # 각 약관일에 대해 년, 월, 일로 나누기
        p_year, p_month, p_day = int(privacies[i][0:4]), int(privacies[i][5:7]), int(privacies[i][8:10])
        
        # 약관조건의 개월을 더한다.
        p_month += time_dict[case]

        # 개월 수가 12월을 넘어가면 다시 1월로
        while p_month > 12:
            p_month -= 12
            p_year += 1
        
        # 년도 비교 
        # 만약 약관 년도가 현재 년도보다 크면 파기 하지 않아도 되기 때문에 리스트에 담지 않고 패스
        if p_year > year:
            continue
        
        # 만약 약관 년도가 현재 년도와 같고 
        elif p_year == year:
            if p_month > month: # 약관 월이 현재 월보다 커도 파기 하지 않아도 되기 때문에 패스 
                continue
                
            elif p_month == month: # 약관 월이 현재 월과 동일하면 
                if p_day > day: # 약관일자가 현재 일자보다 크면 파기 하지 않아도 되기 때문에 패스
                    continue

        
        answer.append(i+1)

    return answer

print(solution("2022.05.19", ["A 6", "B 12", "C 3"], ["2021.05.02 A", "2021.07.01 B", "2022.02.19 C", "2022.02.20 C"]))
print(solution("2020.01.01", ["Z 3", "D 5"], ["2019.01.01 D", "2019.11.15 Z", "2019.08.02 D", "2019.07.01 D", "2018.12.28 Z"]))