# 백준 1783번 병든 나이트 

"""
나이트 이동 방향 

1. 2칸 위로, 1칸 오른쪽
2. 1칸 위로, 2칸 오른쪽
3. 1칸 아래로, 2칸 오른쪽
4. 2칸 아래로, 1칸 오른쪽

아이디어 

1. 세로가 1로 주어질 경우 어떠한 이동 방법도 쓸 수가 없고 시작지점(왼쪽 맨 아래)만 방문하기 때문에 1을 출력 

2. 세로가 2로 주어질 경우 나이트는 2번, 3번 방법 사용가능 
- 두 가지 방법만 사용할 수 있다. (+2, +1) , (+2, -1)
- 따라서, 정답은 min(4, (width+1)/2)
- 이동횟수 제한 때문에 4가 필요하다.

3. 세로가 3 이상, 가로가 6 이하라면 모든 방법을 쓸 수 없다. 
- 1번과 4번만을 이용하는게 최대값이기 때문에 4와 m의 값 중 작은 것을 출력한다. 
- (+1, +2) , (+1, -2)를 번갈아 가며 사용 가능
- min(4, width)

4. 가로가 7 이상이라면 모든 방법을 쓸 수 있고, 알맞는 값을 출력해준다. 
- 4가지 방법을 모두 사용하면 (7, 1)으로 이동
- 여기서부터 (+1, +2)와 (+1, -2)를 번갈아가면서 사용한다.
- widh - 2
"""

import sys

input = sys.stdin.readline

N , M = map(int, input().split())

if N == 1:
    print(1)
elif N == 2:
    print(min(4, (M + 1)//2))
else:
    if M < 6: # 세로 3이상 가로 6 미만
        print(min(4, M))
    else:
        print(M - 2)        