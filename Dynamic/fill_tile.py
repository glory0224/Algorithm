# 백준 2133번 타일 채우기 

T = int(input())

# 문제 제시의 범위 1 ~ 30까지 길이의 dp 배열 만들기
dp = [0] *31
# 아무것도 없는 것도 하나의 경우의 수로 쳐서 1을 넣어준다. 
dp[0] = 1

# 여기서 dp[i] = N -> 짝수로 올 때 패턴이 보인다.   
for i in range(2, T+1, 2):
    dp[i] = dp[i-2] * 3
    # i가 2씩 증가 할 때마다 j는 0부터 2씩 증가하는데 i-2 전까지 돈다. 즉, i - 4 까지만 돌면서 * 2 연산을 진행한다. 
    for j in range(0, i -2, 2):
        dp[i] += dp[j] * 2

print(dp[T]) # 계속 더해주는 코드를 짰기 때문에 맨 나중 인덱스에 최종 경우의 수가 담긴다. 


# dp[0] = 1
# dp[2] = 3
# dp[4] = dp[2] * 3 + 2 -> 경우의 수에 +2가지 새로운 경우 추가
# dp[6] = dp[4] * 3 + dp[2] * 2 +  2 -> 경우의 수에 +2가지 새로운 경우 추가
# dp[8] = dp[6] * 3 + dp[4] * 2 + dp[2] * 2 + dp[0] * 2 ....

# 즉 dp[n] = dp[n-2] * 3 + dp[n-4] * 2 + dp[n-6] * 2 + dp[n-8] * 2 + ... + dp[0] * 2 라는 점화식이 생성된다.

# 그림을 그리면서 생각하면 조금 더 이해가 빨라진다.
