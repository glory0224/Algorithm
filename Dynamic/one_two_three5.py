# 15990번 백준 
# 정수 4를 1, 2, 3의 합으로 나타내는 방법은 총 3가지가 있다. 합을 나타낼 때는 수를 1개 이상 사용해야 한다. 단, 같은 수를 두 번 이상 연속해서 사용하면 안 된다.

#1+2+1
#1+3
#3+1
#정수 n이 주어졌을 때, n을 1, 2, 3의 합으로 나타내는 방법의 수를 구하는 프로그램을 작성하시오.

import sys

input = sys.stdin.readline

dp = [[0 for _ in range(3)] for _ in range(100001)] #dp초기화

# 각각 1,2,3으로 끝나는 경우의 수
dp[1] = [1, 0, 0]
dp[2] = [0, 1, 0]
dp[3] = [1, 1, 1]

# N이 1,2,3 일 때의 값은 위에서 미리 초기화 했기 때문에 4부터 for문 시작
for i in range(4, 100001):

 dp[i][0] = (dp[i -1][1] + dp[i-1][2]) % 1000000009 # 여기서 1000000009로 나눠주지 않으면 1초가 넘어감 (따라서 두번 % 1000000009를 해줘야한다.)
 dp[i][1] = (dp[i -2][0] + dp[i-2][2]) % 1000000009
 dp[i][2] = (dp[i-3][0] + dp[i-3][1]) % 1000000009

# i = 6인 경우

# dp[6][0] = (dp[5][1] + dp[5][2]) 

# -> 5에서 2로 끝나는 경우의 수 : 3+2, 2+1+2    -> 이 경우의 수에서 [..+2] + 1 = 6 
# -> 5에서 3으로 끝나는 경우의 수 : 2+3 -> 이 경우의 수에서도 [..+3] + 1 = 6 
# -> 이 두 경우의 수를 더해주면 결국 6이라는 숫자에 1로 끝나는 경우의 수를 알 수 있음 

# dp[6][1] = (dp[4][0] + dp[4][2])

# -> 4에서 1로 끝나는 경우의 수 : 3+1, 1+2+1 -> 이 경우의 수에서 [..+2] + 2 = 6
# -> 4에서 3으로 끝나는 경우의 수 : 1+3 -> 이 경우의 수에서 [..+3] + 2 = 6

# dp[6][2] = (dp[3][0] + dp[3][1]) 

# -> 3에서 1로 끝나는 경우의 수 : 2+1 -> [..+1] + 3 = 6
# -> 3에서 2로 끝나는 경우의 수 : 1+2 -> [..+2] + 3 = 6


T = int(input())

# 각 테스트 케이스마다, n을 1, 2, 3의 합으로 나타내는 방법의 수를 1,000,000,009로 나눈 나머지를 출력한다.
for i in range(T):
    n = int(input())
    print(sum(dp[n]) % 1000000009)

